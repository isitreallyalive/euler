// Problem 2: Even Fibonacci Numbers
//
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

use euler::prelude::*;

pub const LOOPS: u8 = 100;
pub struct Problem;

impl Execute for Problem {
    fn execute(&self) -> Result<Return> {
        // the 32nd fib number is the last under 4 million
        // see notes/p2.pdf
        let mut seq = [0; 32];
        (seq[0], seq[1]) = (1, 2);

        // calculate fib
        for i in 2..32 {
            seq[i] = seq[i - 1] + seq[i - 2];
        }

        // sum even terms
        let value = seq.iter().filter(|n| *n % 2 == 0).sum();

        Ok(Return::u32(value))
    }
}
